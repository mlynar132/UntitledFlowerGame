//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""d831e3a7-dba7-4644-a600-c1ae16db8d9b"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Player2"",
            ""id"": ""a8edcf8e-dcb8-4a7c-9d5b-7dae61b6935b"",
            ""actions"": [
                {
                    ""name"": ""PlaceBlock"",
                    ""type"": ""Button"",
                    ""id"": ""80fd72b2-3240-4d28-acff-47eba107eccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WhipAttack"",
                    ""type"": ""Button"",
                    ""id"": ""854cfecf-7bbe-4fb8-98b2-8b0274ce71bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7ff219e-ca37-42a7-9c7a-9b77986a2017"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9087153-2831-4de7-b5ef-65a52c7f74d3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WhipAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_PlaceBlock = m_Player2.FindAction("PlaceBlock", throwIfNotFound: true);
        m_Player2_WhipAttack = m_Player2.FindAction("WhipAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private IPlayer1Actions m_Player1ActionsCallbackInterface;
    public struct Player1Actions
    {
        private @PlayerInputAction m_Wrapper;
        public Player1Actions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_Player1ActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private IPlayer2Actions m_Player2ActionsCallbackInterface;
    private readonly InputAction m_Player2_PlaceBlock;
    private readonly InputAction m_Player2_WhipAttack;
    public struct Player2Actions
    {
        private @PlayerInputAction m_Wrapper;
        public Player2Actions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceBlock => m_Wrapper.m_Player2_PlaceBlock;
        public InputAction @WhipAttack => m_Wrapper.m_Player2_WhipAttack;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterface != null)
            {
                @PlaceBlock.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnPlaceBlock;
                @PlaceBlock.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnPlaceBlock;
                @PlaceBlock.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnPlaceBlock;
                @WhipAttack.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnWhipAttack;
                @WhipAttack.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnWhipAttack;
                @WhipAttack.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnWhipAttack;
            }
            m_Wrapper.m_Player2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceBlock.started += instance.OnPlaceBlock;
                @PlaceBlock.performed += instance.OnPlaceBlock;
                @PlaceBlock.canceled += instance.OnPlaceBlock;
                @WhipAttack.started += instance.OnWhipAttack;
                @WhipAttack.performed += instance.OnWhipAttack;
                @WhipAttack.canceled += instance.OnWhipAttack;
            }
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);
    public interface IPlayer1Actions
    {
    }
    public interface IPlayer2Actions
    {
        void OnPlaceBlock(InputAction.CallbackContext context);
        void OnWhipAttack(InputAction.CallbackContext context);
    }
}
